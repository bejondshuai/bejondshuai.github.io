<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
@ resource, 应用的client id。Required
@ realm-public-key, PEM格式的realm public key。可以从console获取，不建议设置。如果不设置，Keycloak会每次下载新的public key。
@ auth-server-url，Keycloak服务器的url。所有Keycloak页面和REST服务都是从这个地址转发的。http://host:port/auth。Required
@ ssl-required，确保所有沟通都通过HTTPS，在产品中应该设置为all。默认值external，意思HTTPS对外部请求是必须的。可用值all, external, none.
@ use-resource-role-mappings，如果是true，adapter会在token里找application级别的role mappings。如果是false, 会看realm级别的role mappings。默认是false
@ public-client, 如果是true，适配器不会为client向Keycloak发送证书。默认是false
@ enable-cors，默认值false。如果是true，会处理CORS 前置请求，同时会从access token检查valid origins。
@ cors-max-age。如果CORS是enabled，这个值会被设置到Access-Control-Max-Age头中。如果没设置，这个头设定就不会在CORS响应里。
@ cors-allowed-methods, 如果cors开启，设定Access-Control-Allow-Methods
@ bearer-only, 针对services，应该设为true。如果开启，adapter不会授权给用户，只会检查bearer tokens。默认是false
@ autodetect-bearer-only, 如果应用服务器既是web应用，又是web服务（SOAP or REST），就应该设为true。这样会对未授权的用户跳转到登录页，对未授权的SOAP/REST客户端会返回401。Keycloak根据头X-Requested-With, SOAPAction或Accept来确定是SOAP还是REST客户端。默认值false
@ enable-basic-auth, 告诉adapter支持basic验证。如果开启，必须提供secret。默认值false。
@ expose-token，如果是true，被授权的浏览器客户端（通过JS HTTP调用）可以通过root/k_query_bearer_token获取signed access token。默认是false
@ credentials, 确定应用的凭证。这是个对象符合，key是credential类型，value是credential类型的值。现阶段支持password和jwt。对‘Confidential’访问方式来说是Required
@ connection-pool-size, Adapter会创建额外的HTTP调用Keycloak Server来讲access code转为access token。这个配置多少个到Keycloak server的连接池装多少个连接，默认是20
@ disable-trust-manager, 如果Keycloak server要求HTTPS，并且这个属性设置为true。那么你就不需要配置truststore。这个设置只用在开发模式中，production环境应该设置成false。默认是false
@ allow-any-hostname, 如果Keycloak server要求HTTPS，并且这个属性设置为true。那么Keycloak server的颁发证书就通过truststore，但是host name验证就去掉了。这个设置只用在开发模式中，production环境应该设置成false。默认是false
@ truststore, 指向keystore文件的路径。如果在路径前加classpath:，那么truststore会从部署的classpath找文件。用于向外与Keycloak server做HTTPS沟通。客户端创建HTTPS请求需要一种验证服务器主机的方式，truststore就是做这个工作的。keystore包含一到多个受信主机证书或凭证管理中心。你可以解压Keycloak server的SSL keystore的public certificate来创建truststore。如果ssl-required是none或disable-trust-manager是true，那么这个属性就是Required。
@ truststore-password, truststore keystore的密码。如果设定了truststore，并且truststore需要密码，那么这个属性就是Required。
@ client-keystore, 指向keystore的路径。这个keystore包含客户端双向SSL验证，用于adapter创建对Keycloak server的HTTPS请求。
@ client-keystore-password, keystore的密码。如果client-keystore设定了，这个就是必须的。
@ client-key-password, 客户端key的密码，如果client-keystore设定了，这个就是必须的。
@ always-refresh-token，如果是true，适配器会在每次请求时都刷新token （这个在开发测试阶段很有必要）
@ register-node-at-startup, 如果是ture，adapter会想Keycloak发送注册请求。这个属性默认是false。在cluster环境中起作用。
@ register-node-period, 定期在Keycloak重新注册adapter。cluster环境中使用。
@ token-store, 可以是session或cookie。默认是session，adapter将账户信息存储在HTTP session中。
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>@ resource, 应用的client id。Required
@ realm-public-key, PEM格式的realm public key。可以从console获取，不建议设置。如果不设置，Keycloak会每次下载新的public key。
@ auth-server-url，Keycloak服务器的url。所有Keycloak页面和REST服务都是从这个地址转发的。http://host:port/auth。Required
@ ssl-required，确保所有沟通都通过HTTPS，在产品中应该设置为all。默认值external，意思HTTPS对外部请求是必须的。可用值all, external, none.
@ use-resource-role-mappings，如果是true，adapter会在token里找application级别的role mappings。如果是false, 会看realm级别的role mappings。默认是false
@ public-client, 如果是true，适配器不会为client向Keycloak发送证书。默认是false
@ enable-cors，默认值false。如果是true，会处理CORS 前置请求，同时会从access token检查valid origins。
@ cors-max-age。如果CORS是enabled，这个值会被设置到Access-Control-Max-Age头中。如果没设置，这个头设定就不会在CORS响应里。
@ cors-allowed-methods, 如果cors开启，设定Access-Control-Allow-Methods
@ bearer-only, 针对services，应该设为true。如果开启，adapter不会授权给用户，只会检查bearer tokens。默认是false
@ autodetect-bearer-only, 如果应用服务器既是web应用，又是web服务（SOAP or REST），就应该设为true。这样会对未授权的用户跳转到登录页，对未授权的SOAP/REST客户端会返回401。Keycloak根据头X-Requested-With, SOAPAction或Accept来确定是SOAP还是REST客户端。默认值false
@ enable-basic-auth, 告诉adapter支持basic验证。如果开启，必须提供secret。默认值false。
@ expose-token，如果是true，被授权的浏览器客户端（通过JS HTTP调用）可以通过root/k<em>query</em>bearer_token获取signed access token。默认是false
@ credentials, 确定应用的凭证。这是个对象符合，key是credential类型，value是credential类型的值。现阶段支持password和jwt。对‘Confidential’访问方式来说是Required
@ connection-pool-size, Adapter会创建额外的HTTP调用Keycloak Server来讲access code转为access token。这个配置多少个到Keycloak server的连接池装多少个连接，默认是20
@ disable-trust-manager, 如果Keycloak server要求HTTPS，并且这个属性设置为true。那么你就不需要配置truststore。这个设置只用在开发模式中，production环境应该设置成false。默认是false
@ allow-any-hostname, 如果Keycloak server要求HTTPS，并且这个属性设置为true。那么Keycloak server的颁发证书就通过truststore，但是host name验证就去掉了。这个设置只用在开发模式中，production环境应该设置成false。默认是false
@ truststore, 指向keystore文件的路径。如果在路径前加classpath:，那么truststore会从部署的classpath找文件。用于向外与Keycloak server做HTTPS沟通。客户端创建HTTPS请求需要一种验证服务器主机的方式，truststore就是做这个工作的。keystore包含一到多个受信主机证书或凭证管理中心。你可以解压Keycloak server的SSL keystore的public certificate来创建truststore。如果ssl-required是none或disable-trust-manager是true，那么这个属性就是Required。
@ truststore-password, truststore keystore的密码。如果设定了truststore，并且truststore需要密码，那么这个属性就是Required。
@ client-keystore, 指向keystore的路径。这个keystore包含客户端双向SSL验证，用于adapter创建对Keycloak server的HTTPS请求。
@ client-keystore-password, keystore的密码。如果client-keystore设定了，这个就是必须的。
@ client-key-password, 客户端key的密码，如果client-keystore设定了，这个就是必须的。
@ always-refresh-token，如果是true，适配器会在每次请求时都刷新token （这个在开发测试阶段很有必要）
@ register-node-at-startup, 如果是ture，adapter会想Keycloak发送注册请求。这个属性默认是false。在cluster环境中起作用。
@ register-node-period, 定期在Keycloak重新注册adapter。cluster环境中使用。
@ token-store, 可以是session或cookie。默认是session，adapter将账户信息存储在HTTP session中。</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "keycloak-java-adapter-properties";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
